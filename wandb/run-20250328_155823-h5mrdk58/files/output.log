  0%|                                                                                                                                   | 0/4096 [00:03<?, ?it/s]
Traceback (most recent call last):
  File "/home/intern/ritarka/EfficientQAT/main_e2e_qp.py", line 884, in <module>
    train()
  File "/home/intern/ritarka/EfficientQAT/main_e2e_qp.py", line 779, in train
    train_losses, test_losses = easgd.train_easgd(train_dataloader, None)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/intern/ritarka/EfficientQAT/main_e2e_qp.py", line 564, in train_easgd
    loss.backward()
  File "/home/intern/anaconda3/envs/efficientqat/lib/python3.11/site-packages/torch/_tensor.py", line 522, in backward
    torch.autograd.backward(
  File "/home/intern/anaconda3/envs/efficientqat/lib/python3.11/site-packages/torch/autograd/__init__.py", line 266, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.96 GiB. GPU 0 has a total capacity of 23.63 GiB of which 411.75 MiB is free. Including non-PyTorch memory, this process has 22.81 GiB memory in use. Of the allocated memory 21.70 GiB is allocated by PyTorch, and 677.78 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
